" Plugins {{{
  call plug#begin()
  " NERDTree {{{
    Plug 'scrooloose/nerdtree'
    Plug 'jistr/vim-nerdtree-tabs'
  " }}}
  " Airline {{{
    Plug 'bling/vim-airline'
  " }}}
  " CamelCaseMotion {{{
  Plug 'bkad/CamelCaseMotion'
  " }}}
  " VCS {{{
    Plug 'tpope/vim-fugitive'
    Plug 'airblade/vim-gitgutter'
  " }}}
  " Commentary {{{
    Plug 'joom/vim-commentary'
  " }}}
  " Utility Scripts {{{
    Plug 'vim-scripts/Align'
    Plug 'vim-scripts/sudo.vim' " e sudo:/etc/passwd
  " }}}
  " Snippets {{{
    Plug 'MarcWeber/vim-addon-mw-utils'
    Plug 'garbas/vim-snipmate'
    Plug 'honza/vim-snippets'
  " }}}
  " Brackets {{{
    " vim-surround {{{
      Plug 'tpope/vim-surround'
      " 'Hello world!' -> <a>Hello world!</a>
      " cs'<q>
      " 'Hello world!' -> Hello world!
      " ds'
    " }}}
    " auto-pairs {{{
      Plug 'jiangmiao/auto-pairs' " Pairs brackets ex) [ -> []
    " }}}
  " }}}
  " Completion {{{
    Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer --tern-completer --gocode-completer'}
    Plug 'rdnetto/YCM-Generator', {'branch': 'stable'}
  " }}}
  " Wildfire {{{
    Plug 'gcmt/wildfire.vim'
  " }}}
  " IndentLine {{{
    Plug 'Yggdroot/indentLine'
  " }}}
  " HTML/CSS {{{
    Plug 'mattn/emmet-vim', {
          \  'for': [
          \    'html','haml','jinja','hbs','html.handlebars','xml','css','less','sass'
          \  ]
          \}
  " }}}
  " Fuzzy Finder {{{
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
    Plug 'junegunn/fzf.vim'
  " }}}
  " Startup Screen {{{
    Plug 'mhinz/vim-startify'
  " }}}
  " Front End {{{
    Plug 'pangloss/vim-javascript'
    Plug 'ap/vim-css-color'
    Plug 'miripiruni/CSScomb-for-Vim'
    Plug 'kchmck/vim-coffee-script'
  " }}}
  " Language {{{
    Plug 'sheerun/vim-polyglot'
    Plug 'klen/python-mode'
    Plug 'derekwyatt/vim-scala'
    Plug 'vim-ruby/vim-ruby'
    Plug 'cypok/vim-sml'
  " }}}
  " Framework {{{
    Plug 'gre/play2vim'
    Plug 'ensime/ensime-vim' "for scala
  " }}}
  " Themes {{{
    Plug 'vim-scripts/wombat256.vim'
    Plug 'altercation/vim-colors-solarized'
    Plug 'flazz/vim-colorschemes'
    Plug 'dfxyz/CandyPaper.vim'
  " }}}
  call plug#end()
" }}}

" YouCompleteMe {{{
let g:ycm_confirm_extra_conf = 1
"let g:ycm_extra_conf_globlist = ['~/dev/*','!~/*']
" }}}

" Pymode {{{
let g:pymode_rope_completion = 0 "disable rope completion
let g:pymode_lint = 0
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" }}}

" Airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
set laststatus=2
set t_Co=256
" }}}

" NERDTree {{{
let g:NERDTreeMapChangeRoot =  "`"

nnoremap <silent> <F11> :NERDTreeToggle<CR>
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=0
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore=['\.pyc$', '\~$']
let NERDTreeWinSize=25

function! NERDTreeQuit()
  redir => buffersoutput
  silent buffers
  redir END
  "                     1BufNo  2Mods.     3File           4LineNo
  let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
  let windowfound = 0

  for bline in split(buffersoutput, "\n")
    let m = matchlist(bline, pattern)

    if (len(m) > 0)
      if (m[2] =~ '..a..')
        let windowfound = 1
      endif
    endif
  endfor

  if (!windowfound)
    quitall
  endif
endfunction
autocmd WinEnter * call NERDTreeQuit()
" }}}

" IndentLine {{{
let g:indentLine_char='|'
" }}}

" Emmet (Zen coding) {{{
let g:user_emmet_mode='i'
let g:user_emmet_leader_key='<C-Y>'
let g:user_emmet_settings={
      \ 'xml': {
      \   'extends': 'html',
      \},
      \ 'haml': {
      \   'extends': 'html',
      \},
      \ 'jinja': {
      \   'extends': 'html',
      \},
      \ 'hbs': {
      \   'extends': 'html',
      \},
      \ 'html.handlebars': {
      \   'extends': 'html',
      \},
    \}
" }}}

" General {{{

set nocompatible
filetype off
set linebreak

set number

syntax on
set mouse=a
set foldmethod=marker
set foldlevelstart=1

filetype plugin indent on

set encoding=utf-8
set fileencodings=utf-8
set tags=./tags,./TAGS,tags,TAGS
set autoindent
set smartindent
set cindent
set background=dark
set expandtab
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set wildignore=*.pyc
set ignorecase
set smartcase
set hlsearch
set incsearch
set shiftround
set history=1000
set undolevels=1000
set noswapfile
set nobackup
set number
set linespace=3
set autochdir
set hidden
set shell=/bin/bash
colorscheme CandyPaper

" Remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e
" Remember last cursor position
autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
" }}}

" Some Useful Key Mappings {{{
"Fuzzy finder
nmap <Tab> :Buffers<CR>
nmap <C-p> :Files<CR>

"for unhighlighing the selections
nmap <Space>x :let @/=''<CR>

"split switch
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"System clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

"Keep the cursor in the same place after yank
vmap y ygv<Esc>

"Reload vimrc
nmap <F5> :source ~/.vimrc<CR>

"New Tab
nmap <Leader>n :tabnew<CR>

"Paste mode toggle
set pastetoggle=<F5><F5>

"Keep selection after indent
vnoremap > ><CR>gv
vnoremap < <<CR>gv

" "Camel case motion (with shift)
map <Space>w <Plug>CamelCaseMotion_w
map <Space>b <Plug>CamelCaseMotion_b
map <Space>e <Plug>CamelCaseMotion_e
" }}}

